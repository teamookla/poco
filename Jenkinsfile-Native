import java.util.regex.Pattern

def OPENSSL_VERSION = "1.1.1"

def agents = [
  deb5_32bit:    [ label: 'nr-build32-deb5-1', toolchains: [
    "openssl-${OPENSSL_VERSION}-deb5_32bit.tar.gz": "."
  ] ],
  deb5_64bit:    [ label: 'nr-build64-deb5-1', , toolchains: [
    "openssl-${OPENSSL_VERSION}-deb5_64bit.tar.gz": "."
  ] ],
  freebsd32:     [ label: 'freebsd32-11' , toolchains: [
    "openssl-${OPENSSL_VERSION}-freebsd11_32bit.tar.gz": "."
  ] ],
  freebsd64:     [ label: 'freebsd-11' , toolchains: [
    "openssl-${OPENSSL_VERSION}-freebsd11_64bit.tar.gz": "."
  ] ],
  macos:         [ label: 'macos' , toolchains: [
    "openssl-${OPENSSL_VERSION}-macos.tar.gz": "."
  ] ],
  win32:         [ label: 'aw-win-lab1' , toolchains: [
    "openssl-${OPENSSL_VERSION}-win32.tar.gz": "."
  ] ],
  win64:         [ label: 'aw-win-lab1' , toolchains: [
    "openssl-${OPENSSL_VERSION}-win32.tar.gz": "."
  ] ],
]

def builds = [
  'freebsd32': [ agent: agents.freebsd32 ],
  'freebsd64': [ agent: agents.freebsd64 ],
  'linux32':   [ agent: agents.deb5_32bit ],
  'linux64':   [ agent: agents.deb5_64bit ],
  'freebsd64': [ agent: agents.freebsd64 ],
  'macosx':    [ agent: agents.macos ],
  'windows32': [ agent: agents.win32, winPlatform:'x86' ],
  'windows64': [ agent: agents.win64, winPlatform:'x86' ],
]

def createBuildStages(builds) {
  builds.collectEntries { name, definition ->
    [ "${name}": createBuildStage(name, definition) ]
  }
}

def createBuildStage(name, definition) {
  return {
    stage(name) {

      node(definition.agent.label) {
        ws("workspace/" + generateWorkspaceName("${env.APPLICATION_NAME}-${env.BRANCH_NAME}-${name}")) {
          checkout scm
          withEnv([
            "PLATFORM=${definition.platform ?: name}",
          ]) {
            withAwsCredentials('jenkins-native-builds') {
              if (definition.agent.toolchains) {
                definition.agent.toolchains.each { toolchain, dest ->
                  if (toolchain.endsWith('.zip')) {
                    sh """
                      aws s3 cp s3://ookla-native-toolchains/${toolchain} ${toolchain}
                      [ -e ${dest} ] || mkdir -p ${dest}
                      unzip -o ${toolchain} -d ${dest}
                      rm ${toolchain}
                    """
                  } else {
                    sh "aws s3 cp s3://ookla-native-toolchains/${toolchain} - | tar xzf - -C ${dest}"
                  }
                }
              }

              ['Debug', 'Release'].each { buildType ->
                dir("cmake_build_${buildType}") {
                  deleteDir()
                }
                dir("cmake_install_${buildType}") {
                  deleteDir()
                }
              }

              if (isUnix()) {
                sh 'PATH=$PATH:/opt/cmake-3.11.4/bin exec ./jenkins.sh'
              } else {
                msvcBat "set PLATFORM=${definition.platform ?: name} & sh ./jenkins.sh", [winPlatform: definition.winPlatform]
              }

              def version = env.BRANCH_NAME
              def m = Pattern.compile("${APPLICATION_NAME}-(\\d.\\d.\\d)").matcher(env.BRANCH_NAME)
              if (m.matches()) {
                version = m.getAt(0)[1]
              }
              m = null

              ['Debug', 'Release'].each { buildType ->
                sh "rm -f cmake_install_${buildType}.zip"
                zip zipFile:"cmake_install_${buildType}.zip", dir:"cmake_install_${buildType}"
                s3Upload(
                  bucket:'ookla-native-artifacts',
                  path:"${APPLICATION_NAME}/${env.BRANCH_NAME}/${APPLICATION_NAME}-${version}-${PLATFORM}-${buildType}.zip",
                  file:"cmake_install_${buildType}.zip")
              }
            }
          }
        }
      }
    }
  }
}

pipeline {
  agent none
  environment {
    APPLICATION_NAME = "poco"
    BUILD_TIMESTAMP = "${timeStamp}"
    OPENSSL_VERSION = "${OPENSSL_VERSION}"
  }
  stages {
    stage('Build All') {
      steps {
        script {
          throttle(['fargate']) {
            parallel createBuildStages(builds)
          }
        }
      }
    }
  }
}
